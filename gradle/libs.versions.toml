[versions]
accompanist = "0.34.0"
activityKtx = "1.9.0"
androidCoreTest = "2.2.0"
androidGradlePlugin = "8.4.1"
androidTools = "31.4.1"
appCompat = "1.7.0"
appcompatV7 = "28.0.0"
assertjCore = "3.26.0"
cardview = "1.0.0"
compose = "1.6.7"
composeActivity = "1.9.0"
composeAnimation = "1.6.7"
composeLifecycle = "2.8.1"
composeMaterial = "1.6.7"
composeNavigation = "2.7.7"
constraintLayout = "2.1.4"
detekt = "1.23.5"
detektComposeUiRules = "0.3.20"
espresso = "3.5.1"
espressoCore = "3.0.2"
espressoRecyclerViewUtils = "1.0"
fragmentKtx = "1.7.1"
glide = "4.16.0"
gson = "2.11.0"
junit = "4.13.2"
junitKtx = "1.1.5"
junitParamTest = "1.1.1"
klint = "1.1.1"
koin = "3.5.6"
kotlin = "2.0.0"
kotlinCoroutines = "1.8.1"
kotlinLogging = "6.0.9"
kotlinTurbine = "1.1.0"
ksp = "2.0.0-1.0.21"
ktxCore = "1.13.1"
leakCanary = "2.14"
legacySupport = "1.0.0"
lifecycle = "2.8.1"
materialTheme = "1.12.0"
mockWebServer = "4.12.0"
mockitoCore = "5.12.0"
mockitoKotlin = "1.6.0"
navigationFragmentKtx = "2.7.7"
navigationUiKtx = "2.7.7"
pluginDetekt = "1.23.6"
#recyclerview = "1.3.2"
room = "2.6.1"
runner = "1.0.2"
showkase = "1.0.3"
splashScreen = "1.0.1"
testCore = "1.5.0"
testJunitExt = "1.1.5"
testJunitKtExtVersions = "1.1.5"
testOrchestrator = "1.4.2"
testRules = "1.5.0"
testRunnerVersion = "1.5.2"
testUiAutomator = "2.3.0"
truth = "1.4.2"

[libraries]
activityKtx = { module = "androidx.activity:activity-ktx", version.ref = "activityKtx" }
appCompat = { module = "androidx.appcompat:appcompat", version.ref = "appCompat" }
cardView = { module = "androidx.cardview:cardview", version.ref = "cardview" }
composeAccompanistNavigationAnimation = { module = "com.google.accompanist:accompanist-navigation-animation", version.ref = "accompanist" }
composeAccompanistPager = { module = "com.google.accompanist:accompanist-pager", version.ref = "accompanist" }
composeAccompanistPermissions = { module = "com.google.accompanist:accompanist-permissions", version.ref = "accompanist" }
composeAccompanistWebView = { module = "com.google.accompanist:accompanist-webview", version.ref = "accompanist" }
composeActivity = { module = "androidx.activity:activity-compose", version.ref = "composeActivity" }
composeAnimation = { module = "androidx.compose.animation:animation", version.ref = "composeAnimation" }
composeLifecycleRuntime = { module = "androidx.lifecycle:lifecycle-runtime-compose", version.ref = "composeLifecycle" }
composeLifecycleViewModel = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "composeLifecycle" }
composeLiveData = { module = "androidx.compose.runtime:runtime-livedata", version.ref = "compose" }
composeMaterial = { module = "androidx.compose.material:material", version.ref = "composeMaterial" }
composeNavigation = { module = "androidx.navigation:navigation-compose", version.ref = "composeNavigation" }
composeShowkase = { module = "com.airbnb.android:showkase", version.ref = "showkase" }
composeShowkaseProcessor = { module = "com.airbnb.android:showkase-processor", version.ref = "showkase" }
composeTestManifest = { module = "androidx.compose.ui:ui-test-manifest", version.ref = "compose" }
composeTooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
constraintLayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintLayout" }
detektFormattion = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }
fragmentKtx = { module = "androidx.fragment:fragment-ktx", version.ref = "fragmentKtx" }
glide = { module = "com.github.bumptech.glide:glide", version.ref = "glide" }
glideCompile = { module = "com.github.bumptech.glide:compiler", version.ref = "glide" }
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
koin-bom = { module = "io.insert-koin:koin-bom", version.ref = "koin" }
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
kotlin = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
kotlinCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinCoroutines" }
kotlinLogging = { module = "io.github.oshai:kotlin-logging-jvm", version.ref = "kotlinLogging" }
ktxCore = { module = "androidx.core:core-ktx", version.ref = "ktxCore" }
klint = { module = "org.jlleitschuh.gradle.ktlint:klint", version.ref = "klint" }
leakCanary = { module = "com.squareup.leakcanary:leakcanary-android", version.ref = "leakCanary" }
legacySupport = { module = "androidx.legacy:legacy-support-v4", version.ref = "legacySupport" }
lifecycleLivedata = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" }
lifecycleViewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
materialTheme = { module = "com.google.android.material:material", version.ref = "materialTheme" }
navigationFragmentKtx = { module = "androidx.navigation:navigation-fragment-ktx", version.ref = "navigationFragmentKtx" }
navigationUiKtx = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "navigationUiKtx" }
#recyclerView = { module = "androidx.recyclerview:recyclerview", version.ref = "recyclerView" }
room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }
room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
splashLibrary = { module = "androidx.core:core-splashscreen", version.ref = "splashScreen" }

# Define test libraries
androidCoreTesting = { module = "androidx.arch.core:core-testing", version.ref = "androidCoreTest" }
assertjCore = { module = "org.assertj:assertj-core", version.ref = "assertjCore" }
junit = { module = "junit:junit", version.ref = "junit" }
junitKtx = { module = "androidx.test.ext:junit-ktx", version.ref = "junitKtx" }
junitParamTest = { module = "pl.pragmatists:JUnitParams", version.ref = "junitParamTest" }
kotlinCoroutinesTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinCoroutines" }
kotlinTurbine = { module = "app.cash.turbine:turbine", version.ref = "kotlinTurbine" }
mockWebServer = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "mockWebServer" }
mockitoCore = { module = "org.mockito:mockito-core", version.ref = "mockitoCore" }
mockitoKotlin = { module = "com.nhaarman:mockito-kotlin", version.ref = "mockitoKotlin" }
orchestrator = { module = "androidx.test:orchestrator", version.ref = "testOrchestrator" }
truth = { module = "com.google.truth:truth", version.ref = "truth" }

# Define android test libraries
espressoContrib = { module = "androidx.test.espresso:espresso-contrib", version.ref = "espresso" }
espressoCore = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso" }
espressoIdlingResource = { module = "androidx.test.espresso:espresso-idling-resource", version.ref = "espresso" }
espressoIntents = { module = "androidx.test.espresso:espresso-intents", version.ref = "espresso" }
espressoRecyclerViewUtils = { module = "it.xabaras.android.espresso:recyclerview-child-actions", version.ref = "espressoRecyclerViewUtils" }
testCore = { module = "androidx.test:core", version.ref = "testCore" }
testJunitExt = { module = "androidx.test.ext:junit", version.ref = "testJunitExt" }
testJunitKtExtVersions = { module = "androidx.test.ext:junit-ktx", version.ref = "testJunitKtExtVersions" }
testRules = { module = "androidx.test:rules", version.ref = "testRules" }
testRunner = { module = "androidx.test:runner", version.ref = "testRunnerVersion" }
testUiAutomator = { module = "androidx.test.uiautomator:uiautomator", version.ref = "testUiAutomator" }

# Dependencies of the included build-logic
android-gradlePlugin = { group = "com.android.tools.build", name = "gradle", version.ref = "androidGradlePlugin" }
android-tools-common = { group = "com.android.tools", name = "common", version.ref = "androidTools" }
compose-gradlePlugin = { module = "org.jetbrains.kotlin:compose-compiler-gradle-plugin", version.ref = "kotlin" }
kotlin-gradlePlugin = { group = "org.jetbrains.kotlin", name = "kotlin-gradle-plugin", version.ref = "kotlin" }
ksp-gradlePlugin = { group = "com.google.devtools.ksp", name = "com.google.devtools.ksp.gradle.plugin", version.ref = "ksp" }
room-gradlePlugin = { group = "androidx.room", name = "room-gradle-plugin", version.ref = "room" }

[plugins]
android-application = { id = "com.android.application", version.ref = "androidGradlePlugin" }
android-library = { id = "com.android.library", version.ref = "androidGradlePlugin" }
android-test = { id = "com.android.test", version.ref = "androidGradlePlugin" }
compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
detektPlugin = { id = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "pluginDetekt" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
room = { id = "androidx.room", version.ref = "room" }

# Define bundles/groups of libraries
[bundles]
androidFramework = ["activityKtx", "appCompat", "cardView", "constraintLayout", "fragmentKtx", "ktxCore", "legacySupport", "lifecycleLivedata", "lifecycleViewmodel", "materialTheme", "navigationFragmentKtx", "navigationUiKtx", "splashLibrary"]
androidTest = ["espressoContrib", "espressoCore", "espressoIdlingResource", "espressoIntents", "espressoRecyclerViewUtils", "mockWebServer", "testCore", "testJunitExt", "testJunitKtExtVersions", "testRules", "testUiAutomator"]
compose = ["composeActivity", "composeAnimation", "composeLifecycleRuntime", "composeLiveData", "composeMaterial", "composeTooling"]
composeNavigationBundle = ["composeAccompanistNavigationAnimation", "composeNavigation"]
detekt = ["detektFormattion"]
junit = ["junit", "junitKtx"]
kotlin = ["kotlin", "kotlinCoroutines"]
test = ["androidCoreTesting", "assertjCore", "junit", "junitParamTest", "kotlinCoroutinesTest", "kotlinTurbine", "mockitoCore", "mockitoKotlin", "testRules", "truth"]
